import { memo, FC, useState, useCallback } from 'react';
import { useQuery, gql } from '@apollo/client';
import Head from 'next/head';
import Layout from '@components/layout';
import NotFound from '@components/notFound';
import Placeholder from '@components/placeholder';
import LoadMore from '@components/loadMore';
import SearchTitle from '@components/searchTitle';
import Home, { HomeProps } from '@components/home';

// No results
// period: { checkIn: "2021-09-01", checkOut: "2021-09-02" }

const QUERY = gql`
  query QueryHomes(
    $region: UUID
    $guests: Int!
    $period: BookingPeriod
    $order: HomesOrder!
    $pageSize: Int!
  ) {
    homes(
      region: $region
      guests: $guests
      period: $period
      order: $order
      pageSize: $pageSize
      page: 1
    ) {
      count
      results {
        id
        title
        photos {
          listOrder
          url
        }
        roomsCount
        bathroomsCount
        bedsCount
        maxOccupancy
        hasPool
        amenities
        seasonPricing {
          highSeason {
            minPrice
            maxPrice
          }
          lowSeason {
            minPrice
            maxPrice
          }
        }
        regionName
        cityName
        stateName
        stateCode
      }
    }
  }
`;

const PLACEHOLDER_LIST: Array<number> = [1, 2, 3];

const InitialPage: FC = () => {
  const [actualRegion, setActualRegion] = useState('');
  const [actualPeriod, setActualPeriod] = useState();
  const [actualCoupon, setActualCoupon] = useState('');
  const [pageSize, setPageSize] = useState(10);
  const { data, error, fetchMore, networkStatus } = useQuery(QUERY, {
    variables: { pageSize, order: 'RELEVANCE', guests: 2 },
    notifyOnNetworkStatusChange: true,
  });

  const loadMore = useCallback(() => {
    setPageSize((prevSize: number): number => {
      const newPageize = prevSize + 10;
      fetchMore({
        variables: { pageSize: newPageize },
      });

      return newPageize;
    });
  }, [fetchMore]);

  const handlSearch = useCallback(
    ({ region, guests, order, period, coupon }) => {
      if (region) {
        setActualRegion(() => region?.name + ', ' + region?.stateCode);
      }

      if (period?.checkIn && period?.checkOut) {
        setActualPeriod(() => period);
      }

      if (coupon) {
        setActualCoupon(() => coupon);
      }

      fetchMore({
        variables: {
          region: region?.id,
          guests: guests?.id,
          order: order?.id,
          period: period,
          coupon: coupon,
        },
      });
    },
    [fetchMore]
  );

  const head = (
    <Head>
      <title>Create Next App</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
  );

  return (
    <Layout head={head} onSearch={handlSearch}>
      <>
        {data?.homes?.count !== 0 && (
          <SearchTitle
            isLoading={networkStatus === 1}
            totalHomes={data?.homes?.count}
          />
        )}

        {networkStatus === 1 && (
          <>
            {PLACEHOLDER_LIST.map((item) => (
              <Placeholder key={item} />
            ))}
          </>
        )}

        {error && <p>{error}</p>}

        {data?.homes?.count === 0 && <NotFound region={actualRegion || ''} />}

        {data?.homes?.results.length > 0 &&
          data?.homes?.results.map((home: HomeProps) => (
            <Home
              key={home.id}
              homeData={home}
              period={actualPeriod}
              coupon={actualCoupon}
            />
          ))}

        {data?.homes?.results.length !== data?.homes?.count && (
          <LoadMore callback={loadMore} />
        )}
      </>
    </Layout>
  );
};

export default memo(InitialPage);
